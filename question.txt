#Первый вариант - одна функция, в которую надо всегда передавать количество шагов, что ухудшает читаемость кода, но избегает его повторение

int PlayerController::Move(Sides side, int step_count) {
    if(step_count <= 0)
        return -1;

    if(side == Sides::UP){
        y_coordinate_ -= step_count;
    }else if(side == Sides::DOWN){
        y_coordinate_ += step_count;
    }else if(side == Sides::LEFT){
        x_coordinate_ -= step_count;
    }else{
        x_coordinate_ += step_count;
    }
    return 0;
}


#Первый вариант - две функции с одним и тем же смыслом, но разными значениями внутри, повторяется много кода, но удобно в использовании 

void PlayerController::Step(Sides side){
    if(side == Sides::UP){
        y_coordinate_ -= 1;
    }else if(side == Sides::DOWN){
        y_coordinate_ += 1;
    }else if(side == Sides::LEFT){
        x_coordinate_ -= 1;
    }else{
        x_coordinate_ += 1;
    }
}

void PlayerController::Dash(Sides side){
    if(side == Sides::UP){
        y_coordinate_ -= 2;
    }else if(side == Sides::DOWN){
        y_coordinate_ += 2;
    }else if(side == Sides::LEFT){
        x_coordinate_ -= 2;
    }else{
        x_coordinate_ += 2;
    }
}


#Третий вариант - 1 функция для пермещение, которая обрабатывает строго определённые значения шагов (1 и 2) и 2 функции, которые вызывают её
#В данном случае функция Move() будет private, а Step() и Dash() - public

int PlayerController::Move(Sides side, int step_count){
    if(step_count != 1 && step_count != 2)
        return 0;
        
    if(side == Sides::UP){
        y_coordinate_ -= step_count;
    }else if(side == Sides::DOWN){
        y_coordinate_ += step_count;
    }else if(side == Sides::LEFT){
        x_coordinate_ -= step_count;
    }else{
        x_coordinate_ += step_count;
    }
}

int PlayerController::Step(Sides side){
    PlayerController::Move(side, 1);
}

int PlayerController::Dash(Sides side){
    PlayerController::Move(side, 2);
}

